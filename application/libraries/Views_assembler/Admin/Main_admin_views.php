<?php
if (! defined( 'BASEPATH' )) {
	exit( 'No direct script access allowed' );
}
class Main_admin_views extends CI_View_assembler {

	public function __construct( $params = null ) {
		parent::__construct( $params );
		if ($params != null) {
			foreach ( $params as $var => $value ) {
				$this->$var = $value;
			}
		}
	}

	protected function main_admin_help( ) {
		// Simply
		return $this->load->view( "Help/admin_main_help", array (), true );
	}
	
	protected function admin_config( $dati ) {
		$form = $sections = "";
		// Go trought options and build inputs
		foreach ( $dati as $file => $values ) {
			// Ho il nome del file e una serie di opzioni (array), quindi costruisco il contenitore e poi ciclo sui valori
			// Open the form
			$form = $this->open_config_form($file);
			// Build the options
			$form .= $this->build_options($values, $form);
			// Build the "submit"
			$form .= $this->build_submit_form_options_generic($file);
			// Close the form
			$form .= $this->ci->load->view( "Common_views/close_form", array (), true );
			// Put the form in the container
			$sections .= $this->build_generic_container($form, $file);
		}		
		return $sections;
	}
	
	protected function install_framework( $dati ) {
		$form = $sections = "";
		// Go trought options and build inputs
		foreach ( $dati as $file => $values ) {
			// Ho il nome del file e una serie di opzioni (array), quindi costruisco il contenitore e poi ciclo sui valori
			// Open the form
			$form = $this->open_config_form($file);
			// Build the options
			$form .= $this->build_options($values, $form);
			// Build the checkbox to force db creation
			$form .= $this->buildForceDbCreation();
			// Build the "submit"
			$form .= $this->build_submit_form_install_framework($file, 1);
			// Close the form
			$form .= $this->ci->load->view( "Common_views/close_form", array (), true );
			// Put the form in the container
			$sections .= $this->build_generic_container($form, $file);
		}
		return $sections;
	}
	
	protected function create_default_user(){
		// Open the form
		$form = $this->open_config_form("user");
		// Create the username field
		$extra = "data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-html=\"true\" data-bs-trigger=\"hover\"  title=\"Admin username\" data-bs-content=\"Choose an administrator username\"";
		$form .= $this->form_field_normale( "username", "text", "admin", "", "Username", 25, "form-control", true, $extra, "" );
		// Create the password field
		$extra = "data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-html=\"true\" data-bs-trigger=\"hover\"  title=\"Admin password\" data-bs-content=\"Choose an administrator password of your choice or keep the autogenerated one\"";
		$pass = random_string("alnum", 8);
		$form .= $this->form_field_normale( "password", "text", "{$pass}", "", "Password", 25, "form-control", true, $extra, "" );
		// Create the email field
		$extra = "data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-html=\"true\" data-bs-trigger=\"hover\"  title=\"Admin email\" data-bs-content=\"Choose an administrator email (MUST EXIST!)\"";
		$form .= $this->form_field_normale( "email", "text", "admin@{$GLOBALS["_SERVER"]["HTTP_HOST"]}", "", "Email", 25, "form-control", true, $extra, "" );
		// Build the "submit"
		$form .= $this->build_submit_form_install_framework("user", 2);
		// Close the form
		$form .= $this->ci->load->view( "Common_views/close_form", array (), true );
		// Put the form in the container
		$sections = $this->build_generic_container($form, "", "Admin Credentials");
		return $sections;
	}
	
	protected function create_new_functionality_form($definitions = array()){
		$form = $options = "";
		$column_name = $definitions["column_name"];
		// Open the form
		$form = $this->open_config_form("functionality");
		$options .= $this->form_select_element("0", "Select a Table");
		foreach ($definitions["tables"] as $table){
			$options .= $this->form_select_element($table->$column_name, $table->$column_name);
		}
		// onchange/onselect, check if already created?
		$action = "";
		$form .= $this->form_select("1", "functionality_table", $options, "Select the Table to use", "form-select", $action);
		// Submit button
		$form .= $this->form_button_submit("submit_functionality", "Create Functionality", "Create Functionality", "onclick=\"xajax_execute('Admin/Main_admin', 'index', 'buildNewStructure', xajax.getFormValues('config_form_functionality', true));\"");
		// Close the form
		$form .= $this->ci->load->view( "Common_views/close_form", array (), true );
		// Put the form in the container
		$sections = $this->build_generic_container($form, "", "New Functionality");
		return $sections;
	}
	
	protected function build_menu(){
		return $this->ci->load->view( "Admin/menu", array (), true );
	}
	
	private function buildForceDbCreation(){
		$checkbox = $this->form_field_normale( "force_db_creation", "checkbox", "1", "", "Force Db Creation", 25, "form-check-input", false, $extra = "", "" );
		return $this->form_input_container_wrapper("force_db_creation", $checkbox, "form-check form-switch");
	}
	
	private function open_config_form($file){
		return $this->ci->load->view( "Common_views/open_form", array (
				"form_id" => "config_form_{$file}",
				"hidden" => $file
		), true );
	}
	
	private function build_submit_form_options_generic($file = ""){
		return $this->form_button_submit("submit_{$file}", "Save", "Save", "onclick=\"xajax_execute('Admin/Main_admin', 'index', 'saveFrameworkOptions', xajax.getFormValues('config_form_{$file}', true));\"");
	}
	
	private function build_submit_form_install_framework($file = "", $step = 1){
		switch (intval($step)) {
			case 1:
				$function = " xajax_execute('Admin/Main_admin', 'index', 'saveDbConfiguration', xajax.getFormValues('config_form_{$file}', true))  ";				
				$confirm = "modal_confirm('Confim', 'If the Db already Exsts, it will be DESTRUCTED and recreated!<br>Are you sure?', function(){ {$function} } ) ";
				$condition = " function() { if ( $('#force_db_creation').is(':checked') ) { {$confirm} } else { {$function} } }";
				$submit = $this->form_button_submit("submit_{$file}", "Test DB Connection", "Test DB Connection", "onclick=\" validateFormAndExecute ('config_form_{$file}', {$condition} )\"");
			break;
			case 2:
				$submit = $this->form_button_submit("submit_{$file}", "Create Administrator", "Create Administrator", "onclick=\"xajax_execute('Admin/Main_admin', 'index', 'saveAdminUser', xajax.getFormValues('config_form_{$file}', true));\"");
			break;
			default:
				;
			break;
		}
		return $submit;
	}
	
	private function build_options($values = array(), $form = ""){
		foreach ( $values as $config_option => $config_value ) {
			$extra = $alert = "";
			if (is_array($config_value) and isset($config_value["Title"])){
				$extra = "data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-html=\"true\" data-bs-trigger=\"hover\"  title=\"{$config_value["Title"]}\" data-bs-content=\"{$config_value["Popover"]}\"";
				$config_value = $config_value["value"];
			}
			if (stripos($config_option, "password") !== false){
				$type = "password";
			} else {
				$type = "text";
			}
			$form .= $this->form_field_normale( $config_option, $type, $config_value, "", ucfirst($config_option), 25, "form-control", true, $extra, $alert );
		}
		return $form;
	}
	
	private function build_generic_container($form = "", $file = "", $title = ""){
		if (trim($file) !== ""){
			$title = "{$file}.php options file, located at {$_SERVER['DOCUMENT_ROOT']}/application/config/";
		} elseif (trim($title) === "") {
			// Nope....$file or $title must be set
			$me = pathinfo(__FILE__);
			$title = "You have to use at least ONE of \$file or \$title in <strong>build_generic_container</strong>: {$me["dirname"]}/{$me["basename"]}, line 94 and below";
		}
		return $this->ci->load->view( "Common_views/section_container_form", array (
				"content" => $form,
				"title" => $title
		), true );
	}
}
?>